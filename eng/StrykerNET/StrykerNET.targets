<Project>
  <!--
    For the large part this is a copy of the Arcade SDK's implementations:
      - https://github.com/dotnet/arcade/blob/b888df17/src/Microsoft.DotNet.Arcade.Sdk/tools/XUnit/XUnit.Runner.targets
      - https://github.com/dotnet/arcade/blob/b888df17/src/Microsoft.DotNet.Arcade.Sdk/tools/VSTest.targets
   -->

  <ItemGroup>
    <PackageReference Include="xunit" Version="$(XUnitVersion)" IsImplicitlyDefined="true" PrivateAssets="all" Publish="true"/>
    <PackageReference Include="xunit.runner.visualstudio" Version="$(XUnitRunnerVisualStudioVersion)" IsImplicitlyDefined="true" PrivateAssets="all" Publish="true"/>
  </ItemGroup>

  <!-- Workaround for https://github.com/xunit/xunit/issues/1651 -->
  <ItemGroup>
    <None Remove="$(NuGetPackageRoot)xunit.runner.visualstudio\$(XUnitRunnerVisualStudioVersion)\build\net20\..\_common\xunit.abstractions.dll" />
  </ItemGroup>

  <ItemGroup>
    <!--
      The list of projects references marked with ProjectUnderTest=true. Essentially, these projects will be mutated.
     -->
    <_ProjectUnderTestProjectReference Include="@(ProjectReference->WithMetadataValue('ProjectUnderTest', 'true'))" />
  </ItemGroup>

  <Target Name="RunTests"
          Outputs="%(TestToRun.ResultsStdOutPath)"
          Condition="'@(TestToRun)' != ''">
    <ItemGroup>
      <_FilteredTestToRun Include="@(TestToRun->WithMetadataValue('TargetFramework', '$(LatestTargetFramework)'))" />
    </ItemGroup>

    <CallTarget Targets="RunMutationTesting" 
                Condition=" '@(_ProjectUnderTestProjectReference)' != '' and '@(_FilteredTestToRun)' != '' " />
  </Target>

  <Target Name="RunMutationTesting">
    <!-- Ensure there is a one-to-one mapping between a test project and a project-under-test -->
    <PropertyGroup>
      <_ProjectUnderTestCount>@(_ProjectUnderTestProjectReference->Count())</_ProjectUnderTestCount>
    </PropertyGroup>
    <Error Condition="$(_ProjectUnderTestCount) != 1" Text="There can be only one ProjectUnderTest. Found $(_ProjectUnderTestCount)."/>

    <PropertyGroup>
      <_MutationTestingResultsLogDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsLogDir)', 'MutationTestingLogs'))</_MutationTestingResultsLogDir>
      <_MutationTestingResultsDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsTestResultsDir)', 'MutationTestingResults'))</_MutationTestingResultsDir>
      <_TestResultsDir>$([MSBuild]::NormalizePath('$(_MutationTestingResultsDir)', '$(MSBuildProjectName)'))</_TestResultsDir>
      <_ResultFileNameNoExt>$(MSBuildProjectName)_$(LatestTargetFramework)_$(TestArchitectures)</_ResultFileNameNoExt>
      <_ResultsStdOutPath>$(_MutationTestingResultsLogDir)$(_ResultFileNameNoExt).log</_ResultsStdOutPath>
    </PropertyGroup>

    <MakeDir Directories="$(_MutationTestingResultsLogDir)"/>
    <MakeDir Directories="$(_TestResultsDir)"/>

    <PropertyGroup>
      <_TestEnvironment>$(LatestTargetFramework)|$(TestArchitectures)</_TestEnvironment>

      <_ProjectUnderTestPathRaw>%(_ProjectUnderTestProjectReference.Identity)</_ProjectUnderTestPathRaw>
      <_ProjectUnderTestPath>$([MSBuild]::NormalizePath('$(_ProjectUnderTestPathRaw)'))</_ProjectUnderTestPath>
      <_StrykerJsonConfigFile>$([MSBuild]::NormalizePath('$(RepositoryEngineeringDir)', 'StrykerNET', 'stryker-config.json'))</_StrykerJsonConfigFile>

      <_TestRunner Condition="'%(_FilteredTestToRun.Architecture)'=='x86' And Exists('$(DotNetRoot)x86\dotnet.exe')">$(DotNetRoot)x86\dotnet.exe</_TestRunner>
      <_TestRunner Condition="'$(_TestRunner)'==''">$(DotNetTool)</_TestRunner>

       <!-- https://stryker-mutator.io/docs/stryker-net/configuration/#project-information -->
      <_TestRunnerArgs>stryker --project "$(_ProjectUnderTestPath)" --test-project "$(MSBuildProjectFullPath)" --config-file "$(_StrykerJsonConfigFile)" --target-framework "$(LatestTargetFramework)" --output "$(_TestResultsDir)"</_TestRunnerArgs>
      <_TestRunnerArgs Condition=" '$(StrykerLogToFile)' == 'true' ">$(_TestRunnerArgs) --log-to-file </_TestRunnerArgs>

      <_TestRunnerCommand>"$(_TestRunner)" $(_TestRunnerArgs)</_TestRunnerCommand>

      <!--
        Redirect std output of the runner.
        Note that xUnit outputs failure info to both STDOUT (stack trace, message) and STDERR (failed test name)
      -->
      <_TestRunnerCommand Condition="'$(TestCaptureOutput)' != 'false'">$(_TestRunnerCommand) > "$(_ResultsStdOutPath)" 2>&amp;1</_TestRunnerCommand>
    </PropertyGroup>

    <Message Text="Mutating $(_ProjectUnderTestPath) [$(_TestEnvironment)]" Importance="high"/>
    <Exec Command='$(_TestRunnerCommand)'
          LogStandardErrorAsError="false"
          WorkingDirectory="$(_TargetDir)"
          IgnoreExitCode="true"
          Timeout="$(_TestTimeout)"
          ContinueOnError="WarnAndContinue">
      <Output TaskParameter="ExitCode" PropertyName="_TestErrorCode" />
    </Exec>

    <!--
      Add command line to the log.
    -->
    <WriteLinesToFile File="$(_ResultsStdOutPath)"
                      Overwrite="false"
                      Lines=";=== COMMAND LINE ===;$(_TestRunnerCommand)"
                      Condition="'$(TestCaptureOutput)' != 'false'" />

    <Delete Files="$(_OnlyTfmPath)" TreatErrorsAsWarnings="true" />

    <!--
      Report test status.
    -->
    <Message Text="Mutation testing succeeded: $(_ProjectUnderTestPath) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' == '0'" Importance="high" />

    <!--
      Ideally we would set ContinueOnError="ErrorAndContinue" so that when a test fails in multi-targeted test project
      we'll still run tests for all target frameworks. ErrorAndContinue doesn't work well on Linux though: https://github.com/Microsoft/msbuild/issues/3961.
    -->
    <Error Text="Mutation testing failed: $(_ResultsStdOutPath) [$(_TestEnvironment)]" Condition="'$(_TestErrorCode)' != '0' and '$(_ErrorOnTestFailure)' != 'false'" File="Stryker.NET" />
  </Target>

</Project>
